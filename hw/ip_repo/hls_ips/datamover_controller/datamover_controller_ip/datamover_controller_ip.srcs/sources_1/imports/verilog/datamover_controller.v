// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="datamover_controller,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.117500,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=220,HLS_SYN_LUT=230,HLSERSION=2019_1}" *)

module datamover_controller (
        ap_clk,
        ap_rst,
        start,
        length,
        m_axis_tdata,
        m_axis_tvalid,
        m_axis_tready
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] start;
input  [63:0] length;
output  [103:0] m_axis_tdata;
output  [0:0] m_axis_tvalid;
input  [0:0] m_axis_tready;

reg   [103:0] m_axis_reg_tdata;
reg   [0:0] m_axis_reg_tvalid;
reg   [0:0] start_reg;
reg   [0:0] core_on;
reg   [63:0] curr_addr;
reg   [63:0] length_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_fu_120_p2;
wire   [0:0] core_on_load_load_fu_126_p1;
wire   [103:0] p_Result_s_fu_168_p5;
wire   [0:0] m_axis_tready_read_read_fu_68_p2;
wire   [0:0] icmp_ln895_fu_146_p2;
wire   [63:0] add_ln700_fu_210_p2;
wire   [63:0] add_ln701_fu_198_p2;
wire   [0:0] lhs_fu_114_p2;
wire   [22:0] trunc_ln681_fu_152_p1;
wire   [22:0] byte_to_transfer_fu_156_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_52;
reg    ap_condition_60;

// power-on initialization
initial begin
#0 m_axis_reg_tdata = 104'd0;
#0 m_axis_reg_tvalid = 1'd0;
#0 start_reg = 1'd0;
#0 core_on = 1'd0;
#0 curr_addr = 64'd0;
#0 length_reg = 64'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        core_on <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_fu_120_p2 == 1'd1)) begin
                core_on <= 1'd1;
            end else if ((1'b1 == ap_condition_52)) begin
                core_on <= 1'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        curr_addr <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_fu_120_p2 == 1'd1)) begin
                curr_addr <= 64'd0;
            end else if ((1'b1 == ap_condition_60)) begin
                curr_addr <= add_ln700_fu_210_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        length_reg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_fu_120_p2 == 1'd1)) begin
                length_reg <= length;
            end else if ((1'b1 == ap_condition_60)) begin
                length_reg <= add_ln701_fu_198_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                m_axis_reg_tdata[0] <= 1'b0;
        m_axis_reg_tdata[1] <= 1'b0;
        m_axis_reg_tdata[2] <= 1'b0;
        m_axis_reg_tdata[3] <= 1'b0;
        m_axis_reg_tdata[4] <= 1'b0;
        m_axis_reg_tdata[5] <= 1'b0;
        m_axis_reg_tdata[6] <= 1'b0;
        m_axis_reg_tdata[7] <= 1'b0;
        m_axis_reg_tdata[8] <= 1'b0;
        m_axis_reg_tdata[9] <= 1'b0;
        m_axis_reg_tdata[10] <= 1'b0;
        m_axis_reg_tdata[11] <= 1'b0;
        m_axis_reg_tdata[12] <= 1'b0;
        m_axis_reg_tdata[13] <= 1'b0;
        m_axis_reg_tdata[14] <= 1'b0;
        m_axis_reg_tdata[15] <= 1'b0;
        m_axis_reg_tdata[16] <= 1'b0;
        m_axis_reg_tdata[17] <= 1'b0;
        m_axis_reg_tdata[18] <= 1'b0;
        m_axis_reg_tdata[19] <= 1'b0;
        m_axis_reg_tdata[20] <= 1'b0;
        m_axis_reg_tdata[21] <= 1'b0;
        m_axis_reg_tdata[22] <= 1'b0;
        m_axis_reg_tdata[23] <= 1'b0;
        m_axis_reg_tdata[32] <= 1'b0;
        m_axis_reg_tdata[33] <= 1'b0;
        m_axis_reg_tdata[34] <= 1'b0;
        m_axis_reg_tdata[35] <= 1'b0;
        m_axis_reg_tdata[36] <= 1'b0;
        m_axis_reg_tdata[37] <= 1'b0;
        m_axis_reg_tdata[38] <= 1'b0;
        m_axis_reg_tdata[39] <= 1'b0;
        m_axis_reg_tdata[40] <= 1'b0;
        m_axis_reg_tdata[41] <= 1'b0;
        m_axis_reg_tdata[42] <= 1'b0;
        m_axis_reg_tdata[43] <= 1'b0;
        m_axis_reg_tdata[44] <= 1'b0;
        m_axis_reg_tdata[45] <= 1'b0;
        m_axis_reg_tdata[46] <= 1'b0;
        m_axis_reg_tdata[47] <= 1'b0;
        m_axis_reg_tdata[48] <= 1'b0;
        m_axis_reg_tdata[49] <= 1'b0;
        m_axis_reg_tdata[50] <= 1'b0;
        m_axis_reg_tdata[51] <= 1'b0;
        m_axis_reg_tdata[52] <= 1'b0;
        m_axis_reg_tdata[53] <= 1'b0;
        m_axis_reg_tdata[54] <= 1'b0;
        m_axis_reg_tdata[55] <= 1'b0;
        m_axis_reg_tdata[56] <= 1'b0;
        m_axis_reg_tdata[57] <= 1'b0;
        m_axis_reg_tdata[58] <= 1'b0;
        m_axis_reg_tdata[59] <= 1'b0;
        m_axis_reg_tdata[60] <= 1'b0;
        m_axis_reg_tdata[61] <= 1'b0;
        m_axis_reg_tdata[62] <= 1'b0;
        m_axis_reg_tdata[63] <= 1'b0;
        m_axis_reg_tdata[64] <= 1'b0;
        m_axis_reg_tdata[65] <= 1'b0;
        m_axis_reg_tdata[66] <= 1'b0;
        m_axis_reg_tdata[67] <= 1'b0;
        m_axis_reg_tdata[68] <= 1'b0;
        m_axis_reg_tdata[69] <= 1'b0;
        m_axis_reg_tdata[70] <= 1'b0;
        m_axis_reg_tdata[71] <= 1'b0;
        m_axis_reg_tdata[72] <= 1'b0;
        m_axis_reg_tdata[73] <= 1'b0;
        m_axis_reg_tdata[74] <= 1'b0;
        m_axis_reg_tdata[75] <= 1'b0;
        m_axis_reg_tdata[76] <= 1'b0;
        m_axis_reg_tdata[77] <= 1'b0;
        m_axis_reg_tdata[78] <= 1'b0;
        m_axis_reg_tdata[79] <= 1'b0;
        m_axis_reg_tdata[80] <= 1'b0;
        m_axis_reg_tdata[81] <= 1'b0;
        m_axis_reg_tdata[82] <= 1'b0;
        m_axis_reg_tdata[83] <= 1'b0;
        m_axis_reg_tdata[84] <= 1'b0;
        m_axis_reg_tdata[85] <= 1'b0;
        m_axis_reg_tdata[86] <= 1'b0;
        m_axis_reg_tdata[87] <= 1'b0;
        m_axis_reg_tdata[88] <= 1'b0;
        m_axis_reg_tdata[89] <= 1'b0;
        m_axis_reg_tdata[90] <= 1'b0;
        m_axis_reg_tdata[91] <= 1'b0;
        m_axis_reg_tdata[92] <= 1'b0;
        m_axis_reg_tdata[93] <= 1'b0;
        m_axis_reg_tdata[94] <= 1'b0;
        m_axis_reg_tdata[95] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ret_fu_120_p2 == 1'd0))) begin
            if (((m_axis_tready_read_read_fu_68_p2 == 1'd1) & (core_on_load_load_fu_126_p1 == 1'd1))) begin
                                m_axis_reg_tdata[23 : 0] <= p_Result_s_fu_168_p5[23 : 0];
                m_axis_reg_tdata[95 : 32] <= p_Result_s_fu_168_p5[95 : 32];
            end else if ((core_on_load_load_fu_126_p1 == 1'd0)) begin
                                m_axis_reg_tdata[0] <= 1'b0;
                m_axis_reg_tdata[1] <= 1'b0;
                m_axis_reg_tdata[2] <= 1'b0;
                m_axis_reg_tdata[3] <= 1'b0;
                m_axis_reg_tdata[4] <= 1'b0;
                m_axis_reg_tdata[5] <= 1'b0;
                m_axis_reg_tdata[6] <= 1'b0;
                m_axis_reg_tdata[7] <= 1'b0;
                m_axis_reg_tdata[8] <= 1'b0;
                m_axis_reg_tdata[9] <= 1'b0;
                m_axis_reg_tdata[10] <= 1'b0;
                m_axis_reg_tdata[11] <= 1'b0;
                m_axis_reg_tdata[12] <= 1'b0;
                m_axis_reg_tdata[13] <= 1'b0;
                m_axis_reg_tdata[14] <= 1'b0;
                m_axis_reg_tdata[15] <= 1'b0;
                m_axis_reg_tdata[16] <= 1'b0;
                m_axis_reg_tdata[17] <= 1'b0;
                m_axis_reg_tdata[18] <= 1'b0;
                m_axis_reg_tdata[19] <= 1'b0;
                m_axis_reg_tdata[20] <= 1'b0;
                m_axis_reg_tdata[21] <= 1'b0;
                m_axis_reg_tdata[22] <= 1'b0;
                m_axis_reg_tdata[23] <= 1'b0;
                m_axis_reg_tdata[32] <= 1'b0;
                m_axis_reg_tdata[33] <= 1'b0;
                m_axis_reg_tdata[34] <= 1'b0;
                m_axis_reg_tdata[35] <= 1'b0;
                m_axis_reg_tdata[36] <= 1'b0;
                m_axis_reg_tdata[37] <= 1'b0;
                m_axis_reg_tdata[38] <= 1'b0;
                m_axis_reg_tdata[39] <= 1'b0;
                m_axis_reg_tdata[40] <= 1'b0;
                m_axis_reg_tdata[41] <= 1'b0;
                m_axis_reg_tdata[42] <= 1'b0;
                m_axis_reg_tdata[43] <= 1'b0;
                m_axis_reg_tdata[44] <= 1'b0;
                m_axis_reg_tdata[45] <= 1'b0;
                m_axis_reg_tdata[46] <= 1'b0;
                m_axis_reg_tdata[47] <= 1'b0;
                m_axis_reg_tdata[48] <= 1'b0;
                m_axis_reg_tdata[49] <= 1'b0;
                m_axis_reg_tdata[50] <= 1'b0;
                m_axis_reg_tdata[51] <= 1'b0;
                m_axis_reg_tdata[52] <= 1'b0;
                m_axis_reg_tdata[53] <= 1'b0;
                m_axis_reg_tdata[54] <= 1'b0;
                m_axis_reg_tdata[55] <= 1'b0;
                m_axis_reg_tdata[56] <= 1'b0;
                m_axis_reg_tdata[57] <= 1'b0;
                m_axis_reg_tdata[58] <= 1'b0;
                m_axis_reg_tdata[59] <= 1'b0;
                m_axis_reg_tdata[60] <= 1'b0;
                m_axis_reg_tdata[61] <= 1'b0;
                m_axis_reg_tdata[62] <= 1'b0;
                m_axis_reg_tdata[63] <= 1'b0;
                m_axis_reg_tdata[64] <= 1'b0;
                m_axis_reg_tdata[65] <= 1'b0;
                m_axis_reg_tdata[66] <= 1'b0;
                m_axis_reg_tdata[67] <= 1'b0;
                m_axis_reg_tdata[68] <= 1'b0;
                m_axis_reg_tdata[69] <= 1'b0;
                m_axis_reg_tdata[70] <= 1'b0;
                m_axis_reg_tdata[71] <= 1'b0;
                m_axis_reg_tdata[72] <= 1'b0;
                m_axis_reg_tdata[73] <= 1'b0;
                m_axis_reg_tdata[74] <= 1'b0;
                m_axis_reg_tdata[75] <= 1'b0;
                m_axis_reg_tdata[76] <= 1'b0;
                m_axis_reg_tdata[77] <= 1'b0;
                m_axis_reg_tdata[78] <= 1'b0;
                m_axis_reg_tdata[79] <= 1'b0;
                m_axis_reg_tdata[80] <= 1'b0;
                m_axis_reg_tdata[81] <= 1'b0;
                m_axis_reg_tdata[82] <= 1'b0;
                m_axis_reg_tdata[83] <= 1'b0;
                m_axis_reg_tdata[84] <= 1'b0;
                m_axis_reg_tdata[85] <= 1'b0;
                m_axis_reg_tdata[86] <= 1'b0;
                m_axis_reg_tdata[87] <= 1'b0;
                m_axis_reg_tdata[88] <= 1'b0;
                m_axis_reg_tdata[89] <= 1'b0;
                m_axis_reg_tdata[90] <= 1'b0;
                m_axis_reg_tdata[91] <= 1'b0;
                m_axis_reg_tdata[92] <= 1'b0;
                m_axis_reg_tdata[93] <= 1'b0;
                m_axis_reg_tdata[94] <= 1'b0;
                m_axis_reg_tdata[95] <= 1'b0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_reg_tvalid <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ret_fu_120_p2 == 1'd0))) begin
            if (((m_axis_tready_read_read_fu_68_p2 == 1'd1) & (core_on_load_load_fu_126_p1 == 1'd1))) begin
                m_axis_reg_tvalid <= 1'd1;
            end else if ((core_on_load_load_fu_126_p1 == 1'd0)) begin
                m_axis_reg_tvalid <= 1'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_reg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            start_reg <= start;
        end
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_210_p2 = (curr_addr + 64'd4194304);

assign add_ln701_fu_198_p2 = ($signed(length_reg) + $signed(64'd18446744073705357312));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_52 = ((m_axis_tready_read_read_fu_68_p2 == 1'd1) & (core_on_load_load_fu_126_p1 == 1'd1) & (icmp_ln895_fu_146_p2 == 1'd0) & (ret_fu_120_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_60 = ((icmp_ln895_fu_146_p2 == 1'd1) & (m_axis_tready_read_read_fu_68_p2 == 1'd1) & (core_on_load_load_fu_126_p1 == 1'd1) & (ret_fu_120_p2 == 1'd0));
end

assign byte_to_transfer_fu_156_p3 = ((icmp_ln895_fu_146_p2[0:0] === 1'b1) ? 23'd4194304 : trunc_ln681_fu_152_p1);

assign core_on_load_load_fu_126_p1 = core_on;

assign icmp_ln895_fu_146_p2 = ((length_reg > 64'd4194304) ? 1'b1 : 1'b0);

assign lhs_fu_114_p2 = (start_reg ^ 1'd1);

assign m_axis_tdata = m_axis_reg_tdata;

assign m_axis_tready_read_read_fu_68_p2 = m_axis_tready;

assign m_axis_tvalid = m_axis_reg_tvalid;

assign p_Result_s_fu_168_p5 = {{{{{{8'd0}, {curr_addr}}}, {9'd1}}}, {byte_to_transfer_fu_156_p3}};

assign ret_fu_120_p2 = (start & lhs_fu_114_p2);

assign trunc_ln681_fu_152_p1 = length_reg[22:0];

always @ (posedge ap_clk) begin
    m_axis_reg_tdata[31:24] <= 8'b00000000;
    m_axis_reg_tdata[103:96] <= 8'b00000000;
end

endmodule //datamover_controller
