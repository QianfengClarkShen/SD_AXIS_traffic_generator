-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity datamover_controller is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    start_V : IN STD_LOGIC_VECTOR (0 downto 0);
    length_V : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tdata_V : OUT STD_LOGIC_VECTOR (103 downto 0);
    m_axis_tvalid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tready_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of datamover_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "datamover_controller,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.117500,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=220,HLS_SYN_LUT=230,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv104_0 : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_400000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv64_FFFFFFFFFFC00000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111110000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal m_axis_reg_tdata_V : STD_LOGIC_VECTOR (103 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal m_axis_reg_tvalid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal start_reg_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal core_on_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal curr_addr_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal length_reg_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal core_on_V_load_load_fu_126_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_168_p5 : STD_LOGIC_VECTOR (103 downto 0);
    signal m_axis_tready_V_read_read_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln701_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln681_fu_152_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal byte_to_transfer_V_fu_156_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_52 : BOOLEAN;
    signal ap_condition_60 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    core_on_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                core_on_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_120_p2 = ap_const_lv1_1)) then 
                        core_on_V <= ap_const_lv1_1;
                    elsif ((ap_const_boolean_1 = ap_condition_52)) then 
                        core_on_V <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    curr_addr_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                curr_addr_V <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_120_p2 = ap_const_lv1_1)) then 
                        curr_addr_V <= ap_const_lv64_0;
                    elsif ((ap_const_boolean_1 = ap_condition_60)) then 
                        curr_addr_V <= add_ln700_fu_210_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    length_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                length_reg_V <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_120_p2 = ap_const_lv1_1)) then 
                        length_reg_V <= length_V;
                    elsif ((ap_const_boolean_1 = ap_condition_60)) then 
                        length_reg_V <= add_ln701_fu_198_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    m_axis_reg_tdata_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_reg_tdata_V(0) <= '0';
                m_axis_reg_tdata_V(1) <= '0';
                m_axis_reg_tdata_V(2) <= '0';
                m_axis_reg_tdata_V(3) <= '0';
                m_axis_reg_tdata_V(4) <= '0';
                m_axis_reg_tdata_V(5) <= '0';
                m_axis_reg_tdata_V(6) <= '0';
                m_axis_reg_tdata_V(7) <= '0';
                m_axis_reg_tdata_V(8) <= '0';
                m_axis_reg_tdata_V(9) <= '0';
                m_axis_reg_tdata_V(10) <= '0';
                m_axis_reg_tdata_V(11) <= '0';
                m_axis_reg_tdata_V(12) <= '0';
                m_axis_reg_tdata_V(13) <= '0';
                m_axis_reg_tdata_V(14) <= '0';
                m_axis_reg_tdata_V(15) <= '0';
                m_axis_reg_tdata_V(16) <= '0';
                m_axis_reg_tdata_V(17) <= '0';
                m_axis_reg_tdata_V(18) <= '0';
                m_axis_reg_tdata_V(19) <= '0';
                m_axis_reg_tdata_V(20) <= '0';
                m_axis_reg_tdata_V(21) <= '0';
                m_axis_reg_tdata_V(22) <= '0';
                m_axis_reg_tdata_V(23) <= '0';
                m_axis_reg_tdata_V(32) <= '0';
                m_axis_reg_tdata_V(33) <= '0';
                m_axis_reg_tdata_V(34) <= '0';
                m_axis_reg_tdata_V(35) <= '0';
                m_axis_reg_tdata_V(36) <= '0';
                m_axis_reg_tdata_V(37) <= '0';
                m_axis_reg_tdata_V(38) <= '0';
                m_axis_reg_tdata_V(39) <= '0';
                m_axis_reg_tdata_V(40) <= '0';
                m_axis_reg_tdata_V(41) <= '0';
                m_axis_reg_tdata_V(42) <= '0';
                m_axis_reg_tdata_V(43) <= '0';
                m_axis_reg_tdata_V(44) <= '0';
                m_axis_reg_tdata_V(45) <= '0';
                m_axis_reg_tdata_V(46) <= '0';
                m_axis_reg_tdata_V(47) <= '0';
                m_axis_reg_tdata_V(48) <= '0';
                m_axis_reg_tdata_V(49) <= '0';
                m_axis_reg_tdata_V(50) <= '0';
                m_axis_reg_tdata_V(51) <= '0';
                m_axis_reg_tdata_V(52) <= '0';
                m_axis_reg_tdata_V(53) <= '0';
                m_axis_reg_tdata_V(54) <= '0';
                m_axis_reg_tdata_V(55) <= '0';
                m_axis_reg_tdata_V(56) <= '0';
                m_axis_reg_tdata_V(57) <= '0';
                m_axis_reg_tdata_V(58) <= '0';
                m_axis_reg_tdata_V(59) <= '0';
                m_axis_reg_tdata_V(60) <= '0';
                m_axis_reg_tdata_V(61) <= '0';
                m_axis_reg_tdata_V(62) <= '0';
                m_axis_reg_tdata_V(63) <= '0';
                m_axis_reg_tdata_V(64) <= '0';
                m_axis_reg_tdata_V(65) <= '0';
                m_axis_reg_tdata_V(66) <= '0';
                m_axis_reg_tdata_V(67) <= '0';
                m_axis_reg_tdata_V(68) <= '0';
                m_axis_reg_tdata_V(69) <= '0';
                m_axis_reg_tdata_V(70) <= '0';
                m_axis_reg_tdata_V(71) <= '0';
                m_axis_reg_tdata_V(72) <= '0';
                m_axis_reg_tdata_V(73) <= '0';
                m_axis_reg_tdata_V(74) <= '0';
                m_axis_reg_tdata_V(75) <= '0';
                m_axis_reg_tdata_V(76) <= '0';
                m_axis_reg_tdata_V(77) <= '0';
                m_axis_reg_tdata_V(78) <= '0';
                m_axis_reg_tdata_V(79) <= '0';
                m_axis_reg_tdata_V(80) <= '0';
                m_axis_reg_tdata_V(81) <= '0';
                m_axis_reg_tdata_V(82) <= '0';
                m_axis_reg_tdata_V(83) <= '0';
                m_axis_reg_tdata_V(84) <= '0';
                m_axis_reg_tdata_V(85) <= '0';
                m_axis_reg_tdata_V(86) <= '0';
                m_axis_reg_tdata_V(87) <= '0';
                m_axis_reg_tdata_V(88) <= '0';
                m_axis_reg_tdata_V(89) <= '0';
                m_axis_reg_tdata_V(90) <= '0';
                m_axis_reg_tdata_V(91) <= '0';
                m_axis_reg_tdata_V(92) <= '0';
                m_axis_reg_tdata_V(93) <= '0';
                m_axis_reg_tdata_V(94) <= '0';
                m_axis_reg_tdata_V(95) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ret_V_fu_120_p2 = ap_const_lv1_0))) then
                    if (((m_axis_tready_V_read_read_fu_68_p2 = ap_const_lv1_1) and (core_on_V_load_load_fu_126_p1 = ap_const_lv1_1))) then 
                                                m_axis_reg_tdata_V(23 downto 0) <= p_Result_s_fu_168_p5(23 downto 0);                        m_axis_reg_tdata_V(95 downto 32) <= p_Result_s_fu_168_p5(95 downto 32);
                    elsif ((core_on_V_load_load_fu_126_p1 = ap_const_lv1_0)) then 
                        m_axis_reg_tdata_V(0) <= '0';
                        m_axis_reg_tdata_V(1) <= '0';
                        m_axis_reg_tdata_V(2) <= '0';
                        m_axis_reg_tdata_V(3) <= '0';
                        m_axis_reg_tdata_V(4) <= '0';
                        m_axis_reg_tdata_V(5) <= '0';
                        m_axis_reg_tdata_V(6) <= '0';
                        m_axis_reg_tdata_V(7) <= '0';
                        m_axis_reg_tdata_V(8) <= '0';
                        m_axis_reg_tdata_V(9) <= '0';
                        m_axis_reg_tdata_V(10) <= '0';
                        m_axis_reg_tdata_V(11) <= '0';
                        m_axis_reg_tdata_V(12) <= '0';
                        m_axis_reg_tdata_V(13) <= '0';
                        m_axis_reg_tdata_V(14) <= '0';
                        m_axis_reg_tdata_V(15) <= '0';
                        m_axis_reg_tdata_V(16) <= '0';
                        m_axis_reg_tdata_V(17) <= '0';
                        m_axis_reg_tdata_V(18) <= '0';
                        m_axis_reg_tdata_V(19) <= '0';
                        m_axis_reg_tdata_V(20) <= '0';
                        m_axis_reg_tdata_V(21) <= '0';
                        m_axis_reg_tdata_V(22) <= '0';
                        m_axis_reg_tdata_V(23) <= '0';
                        m_axis_reg_tdata_V(32) <= '0';
                        m_axis_reg_tdata_V(33) <= '0';
                        m_axis_reg_tdata_V(34) <= '0';
                        m_axis_reg_tdata_V(35) <= '0';
                        m_axis_reg_tdata_V(36) <= '0';
                        m_axis_reg_tdata_V(37) <= '0';
                        m_axis_reg_tdata_V(38) <= '0';
                        m_axis_reg_tdata_V(39) <= '0';
                        m_axis_reg_tdata_V(40) <= '0';
                        m_axis_reg_tdata_V(41) <= '0';
                        m_axis_reg_tdata_V(42) <= '0';
                        m_axis_reg_tdata_V(43) <= '0';
                        m_axis_reg_tdata_V(44) <= '0';
                        m_axis_reg_tdata_V(45) <= '0';
                        m_axis_reg_tdata_V(46) <= '0';
                        m_axis_reg_tdata_V(47) <= '0';
                        m_axis_reg_tdata_V(48) <= '0';
                        m_axis_reg_tdata_V(49) <= '0';
                        m_axis_reg_tdata_V(50) <= '0';
                        m_axis_reg_tdata_V(51) <= '0';
                        m_axis_reg_tdata_V(52) <= '0';
                        m_axis_reg_tdata_V(53) <= '0';
                        m_axis_reg_tdata_V(54) <= '0';
                        m_axis_reg_tdata_V(55) <= '0';
                        m_axis_reg_tdata_V(56) <= '0';
                        m_axis_reg_tdata_V(57) <= '0';
                        m_axis_reg_tdata_V(58) <= '0';
                        m_axis_reg_tdata_V(59) <= '0';
                        m_axis_reg_tdata_V(60) <= '0';
                        m_axis_reg_tdata_V(61) <= '0';
                        m_axis_reg_tdata_V(62) <= '0';
                        m_axis_reg_tdata_V(63) <= '0';
                        m_axis_reg_tdata_V(64) <= '0';
                        m_axis_reg_tdata_V(65) <= '0';
                        m_axis_reg_tdata_V(66) <= '0';
                        m_axis_reg_tdata_V(67) <= '0';
                        m_axis_reg_tdata_V(68) <= '0';
                        m_axis_reg_tdata_V(69) <= '0';
                        m_axis_reg_tdata_V(70) <= '0';
                        m_axis_reg_tdata_V(71) <= '0';
                        m_axis_reg_tdata_V(72) <= '0';
                        m_axis_reg_tdata_V(73) <= '0';
                        m_axis_reg_tdata_V(74) <= '0';
                        m_axis_reg_tdata_V(75) <= '0';
                        m_axis_reg_tdata_V(76) <= '0';
                        m_axis_reg_tdata_V(77) <= '0';
                        m_axis_reg_tdata_V(78) <= '0';
                        m_axis_reg_tdata_V(79) <= '0';
                        m_axis_reg_tdata_V(80) <= '0';
                        m_axis_reg_tdata_V(81) <= '0';
                        m_axis_reg_tdata_V(82) <= '0';
                        m_axis_reg_tdata_V(83) <= '0';
                        m_axis_reg_tdata_V(84) <= '0';
                        m_axis_reg_tdata_V(85) <= '0';
                        m_axis_reg_tdata_V(86) <= '0';
                        m_axis_reg_tdata_V(87) <= '0';
                        m_axis_reg_tdata_V(88) <= '0';
                        m_axis_reg_tdata_V(89) <= '0';
                        m_axis_reg_tdata_V(90) <= '0';
                        m_axis_reg_tdata_V(91) <= '0';
                        m_axis_reg_tdata_V(92) <= '0';
                        m_axis_reg_tdata_V(93) <= '0';
                        m_axis_reg_tdata_V(94) <= '0';
                        m_axis_reg_tdata_V(95) <= '0';
                    end if;
                end if; 
            end if;
        end if;
    end process;


    m_axis_reg_tvalid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_reg_tvalid_V <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ret_V_fu_120_p2 = ap_const_lv1_0))) then
                    if (((m_axis_tready_V_read_read_fu_68_p2 = ap_const_lv1_1) and (core_on_V_load_load_fu_126_p1 = ap_const_lv1_1))) then 
                        m_axis_reg_tvalid_V <= ap_const_lv1_1;
                    elsif ((core_on_V_load_load_fu_126_p1 = ap_const_lv1_0)) then 
                        m_axis_reg_tvalid_V <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    start_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_reg_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    start_reg_V <= start_V;
                end if; 
            end if;
        end if;
    end process;

    m_axis_reg_tdata_V(31 downto 24) <= "00000000";
    m_axis_reg_tdata_V(103 downto 96) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_210_p2 <= std_logic_vector(unsigned(curr_addr_V) + unsigned(ap_const_lv64_400000));
    add_ln701_fu_198_p2 <= std_logic_vector(unsigned(length_reg_V) + unsigned(ap_const_lv64_FFFFFFFFFFC00000));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_52_assign_proc : process(ret_V_fu_120_p2, core_on_V_load_load_fu_126_p1, m_axis_tready_V_read_read_fu_68_p2, icmp_ln895_fu_146_p2)
    begin
                ap_condition_52 <= ((m_axis_tready_V_read_read_fu_68_p2 = ap_const_lv1_1) and (core_on_V_load_load_fu_126_p1 = ap_const_lv1_1) and (icmp_ln895_fu_146_p2 = ap_const_lv1_0) and (ret_V_fu_120_p2 = ap_const_lv1_0));
    end process;


    ap_condition_60_assign_proc : process(ret_V_fu_120_p2, core_on_V_load_load_fu_126_p1, m_axis_tready_V_read_read_fu_68_p2, icmp_ln895_fu_146_p2)
    begin
                ap_condition_60 <= ((icmp_ln895_fu_146_p2 = ap_const_lv1_1) and (m_axis_tready_V_read_read_fu_68_p2 = ap_const_lv1_1) and (core_on_V_load_load_fu_126_p1 = ap_const_lv1_1) and (ret_V_fu_120_p2 = ap_const_lv1_0));
    end process;

    byte_to_transfer_V_fu_156_p3 <= 
        ap_const_lv23_400000 when (icmp_ln895_fu_146_p2(0) = '1') else 
        trunc_ln681_fu_152_p1;
    core_on_V_load_load_fu_126_p1 <= core_on_V;
    icmp_ln895_fu_146_p2 <= "1" when (unsigned(length_reg_V) > unsigned(ap_const_lv64_400000)) else "0";
    lhs_V_fu_114_p2 <= (start_reg_V xor ap_const_lv1_1);
    m_axis_tdata_V <= m_axis_reg_tdata_V;
    m_axis_tready_V_read_read_fu_68_p2 <= m_axis_tready_V;
    m_axis_tvalid_V <= m_axis_reg_tvalid_V;
    p_Result_s_fu_168_p5 <= (((ap_const_lv8_0 & curr_addr_V) & ap_const_lv9_1) & byte_to_transfer_V_fu_156_p3);
    ret_V_fu_120_p2 <= (start_V and lhs_V_fu_114_p2);
    trunc_ln681_fu_152_p1 <= length_reg_V(23 - 1 downto 0);
end behav;
