// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _datamover_controller_HH_
#define _datamover_controller_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct datamover_controller : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<1> > start_V;
    sc_in< sc_lv<64> > length_V;
    sc_out< sc_lv<104> > m_axis_tdata_V;
    sc_out< sc_lv<1> > m_axis_tvalid_V;
    sc_in< sc_lv<1> > m_axis_tready_V;


    // Module declarations
    datamover_controller(sc_module_name name);
    SC_HAS_PROCESS(datamover_controller);

    ~datamover_controller();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<104> > m_axis_reg_tdata_V;
    sc_signal< sc_lv<1> > m_axis_reg_tvalid_V;
    sc_signal< sc_lv<1> > start_reg_V;
    sc_signal< sc_lv<1> > core_on_V;
    sc_signal< sc_lv<64> > curr_addr_V;
    sc_signal< sc_lv<64> > length_reg_V;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > ret_V_fu_120_p2;
    sc_signal< sc_lv<1> > core_on_V_load_load_fu_126_p1;
    sc_signal< sc_lv<104> > p_Result_s_fu_168_p5;
    sc_signal< sc_lv<1> > m_axis_tready_V_read_read_fu_68_p2;
    sc_signal< sc_lv<1> > icmp_ln895_fu_146_p2;
    sc_signal< sc_lv<64> > add_ln700_fu_210_p2;
    sc_signal< sc_lv<64> > add_ln701_fu_198_p2;
    sc_signal< sc_lv<1> > lhs_V_fu_114_p2;
    sc_signal< sc_lv<23> > trunc_ln681_fu_152_p1;
    sc_signal< sc_lv<23> > byte_to_transfer_V_fu_156_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_52;
    sc_signal< bool > ap_condition_60;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<104> ap_const_lv104_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_400000;
    static const sc_lv<23> ap_const_lv23_400000;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFC00000;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_fu_210_p2();
    void thread_add_ln701_fu_198_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_condition_52();
    void thread_ap_condition_60();
    void thread_byte_to_transfer_V_fu_156_p3();
    void thread_core_on_V_load_load_fu_126_p1();
    void thread_icmp_ln895_fu_146_p2();
    void thread_lhs_V_fu_114_p2();
    void thread_m_axis_tdata_V();
    void thread_m_axis_tready_V_read_read_fu_68_p2();
    void thread_m_axis_tvalid_V();
    void thread_p_Result_s_fu_168_p5();
    void thread_ret_V_fu_120_p2();
    void thread_trunc_ln681_fu_152_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
