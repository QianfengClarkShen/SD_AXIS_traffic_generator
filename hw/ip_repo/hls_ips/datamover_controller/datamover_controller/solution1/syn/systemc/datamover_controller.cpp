// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "datamover_controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic datamover_controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> datamover_controller::ap_ST_fsm_state1 = "1";
const sc_lv<104> datamover_controller::ap_const_lv104_0 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> datamover_controller::ap_const_lv1_0 = "0";
const sc_lv<64> datamover_controller::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> datamover_controller::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> datamover_controller::ap_const_lv1_1 = "1";
const sc_lv<64> datamover_controller::ap_const_lv64_400000 = "10000000000000000000000";
const sc_lv<23> datamover_controller::ap_const_lv23_400000 = "10000000000000000000000";
const sc_lv<8> datamover_controller::ap_const_lv8_0 = "00000000";
const sc_lv<9> datamover_controller::ap_const_lv9_1 = "1";
const sc_lv<64> datamover_controller::ap_const_lv64_FFFFFFFFFFC00000 = "1111111111111111111111111111111111111111110000000000000000000000";
const sc_logic datamover_controller::ap_const_logic_0 = sc_dt::Log_0;
const bool datamover_controller::ap_const_boolean_1 = true;

datamover_controller::datamover_controller(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_210_p2);
    sensitive << ( curr_addr_V );

    SC_METHOD(thread_add_ln701_fu_198_p2);
    sensitive << ( length_reg_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_52);
    sensitive << ( ret_V_fu_120_p2 );
    sensitive << ( core_on_V_load_load_fu_126_p1 );
    sensitive << ( m_axis_tready_V_read_read_fu_68_p2 );
    sensitive << ( icmp_ln895_fu_146_p2 );

    SC_METHOD(thread_ap_condition_60);
    sensitive << ( ret_V_fu_120_p2 );
    sensitive << ( core_on_V_load_load_fu_126_p1 );
    sensitive << ( m_axis_tready_V_read_read_fu_68_p2 );
    sensitive << ( icmp_ln895_fu_146_p2 );

    SC_METHOD(thread_byte_to_transfer_V_fu_156_p3);
    sensitive << ( icmp_ln895_fu_146_p2 );
    sensitive << ( trunc_ln681_fu_152_p1 );

    SC_METHOD(thread_core_on_V_load_load_fu_126_p1);
    sensitive << ( core_on_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_120_p2 );

    SC_METHOD(thread_icmp_ln895_fu_146_p2);
    sensitive << ( length_reg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_120_p2 );
    sensitive << ( core_on_V_load_load_fu_126_p1 );
    sensitive << ( m_axis_tready_V_read_read_fu_68_p2 );

    SC_METHOD(thread_lhs_V_fu_114_p2);
    sensitive << ( start_reg_V );

    SC_METHOD(thread_m_axis_tdata_V);
    sensitive << ( m_axis_reg_tdata_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_m_axis_tready_V_read_read_fu_68_p2);
    sensitive << ( m_axis_tready_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_m_axis_tvalid_V);
    sensitive << ( m_axis_reg_tvalid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_p_Result_s_fu_168_p5);
    sensitive << ( curr_addr_V );
    sensitive << ( byte_to_transfer_V_fu_156_p3 );

    SC_METHOD(thread_ret_V_fu_120_p2);
    sensitive << ( start_V );
    sensitive << ( lhs_V_fu_114_p2 );

    SC_METHOD(thread_trunc_ln681_fu_152_p1);
    sensitive << ( length_reg_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    m_axis_reg_tdata_V = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    m_axis_reg_tvalid_V = "0";
    start_reg_V = "0";
    core_on_V = "0";
    curr_addr_V = "0000000000000000000000000000000000000000000000000000000000000000";
    length_reg_V = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "datamover_controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, start_V, "(port)start_V");
    sc_trace(mVcdFile, length_V, "(port)length_V");
    sc_trace(mVcdFile, m_axis_tdata_V, "(port)m_axis_tdata_V");
    sc_trace(mVcdFile, m_axis_tvalid_V, "(port)m_axis_tvalid_V");
    sc_trace(mVcdFile, m_axis_tready_V, "(port)m_axis_tready_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, m_axis_reg_tdata_V, "m_axis_reg_tdata_V");
    sc_trace(mVcdFile, m_axis_reg_tvalid_V, "m_axis_reg_tvalid_V");
    sc_trace(mVcdFile, start_reg_V, "start_reg_V");
    sc_trace(mVcdFile, core_on_V, "core_on_V");
    sc_trace(mVcdFile, curr_addr_V, "curr_addr_V");
    sc_trace(mVcdFile, length_reg_V, "length_reg_V");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ret_V_fu_120_p2, "ret_V_fu_120_p2");
    sc_trace(mVcdFile, core_on_V_load_load_fu_126_p1, "core_on_V_load_load_fu_126_p1");
    sc_trace(mVcdFile, p_Result_s_fu_168_p5, "p_Result_s_fu_168_p5");
    sc_trace(mVcdFile, m_axis_tready_V_read_read_fu_68_p2, "m_axis_tready_V_read_read_fu_68_p2");
    sc_trace(mVcdFile, icmp_ln895_fu_146_p2, "icmp_ln895_fu_146_p2");
    sc_trace(mVcdFile, add_ln700_fu_210_p2, "add_ln700_fu_210_p2");
    sc_trace(mVcdFile, add_ln701_fu_198_p2, "add_ln701_fu_198_p2");
    sc_trace(mVcdFile, lhs_V_fu_114_p2, "lhs_V_fu_114_p2");
    sc_trace(mVcdFile, trunc_ln681_fu_152_p1, "trunc_ln681_fu_152_p1");
    sc_trace(mVcdFile, byte_to_transfer_V_fu_156_p3, "byte_to_transfer_V_fu_156_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_52, "ap_condition_52");
    sc_trace(mVcdFile, ap_condition_60, "ap_condition_60");
#endif

    }
    mHdltvinHandle.open("datamover_controller.hdltvin.dat");
    mHdltvoutHandle.open("datamover_controller.hdltvout.dat");
}

datamover_controller::~datamover_controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void datamover_controller::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        core_on_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_120_p2.read(), ap_const_lv1_1)) {
                core_on_V = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_condition_52.read(), ap_const_boolean_1)) {
                core_on_V = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        curr_addr_V = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_120_p2.read(), ap_const_lv1_1)) {
                curr_addr_V = ap_const_lv64_0;
            } else if (esl_seteq<1,1,1>(ap_condition_60.read(), ap_const_boolean_1)) {
                curr_addr_V = add_ln700_fu_210_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        length_reg_V = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_120_p2.read(), ap_const_lv1_1)) {
                length_reg_V = length_V.read();
            } else if (esl_seteq<1,1,1>(ap_condition_60.read(), ap_const_boolean_1)) {
                length_reg_V = add_ln701_fu_198_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        m_axis_reg_tdata_V = ap_const_lv104_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_120_p2.read()))) {
            if ((esl_seteq<1,1,1>(core_on_V_load_load_fu_126_p1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, m_axis_tready_V_read_read_fu_68_p2.read()))) {
                m_axis_reg_tdata_V = p_Result_s_fu_168_p5.read();
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, core_on_V_load_load_fu_126_p1.read())) {
                m_axis_reg_tdata_V = ap_const_lv104_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        m_axis_reg_tvalid_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_120_p2.read()))) {
            if ((esl_seteq<1,1,1>(core_on_V_load_load_fu_126_p1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, m_axis_tready_V_read_read_fu_68_p2.read()))) {
                m_axis_reg_tvalid_V = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, core_on_V_load_load_fu_126_p1.read())) {
                m_axis_reg_tvalid_V = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_reg_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            start_reg_V = start_V.read();
        }
    }
}

void datamover_controller::thread_add_ln700_fu_210_p2() {
    add_ln700_fu_210_p2 = (!curr_addr_V.read().is_01() || !ap_const_lv64_400000.is_01())? sc_lv<64>(): (sc_biguint<64>(curr_addr_V.read()) + sc_biguint<64>(ap_const_lv64_400000));
}

void datamover_controller::thread_add_ln701_fu_198_p2() {
    add_ln701_fu_198_p2 = (!length_reg_V.read().is_01() || !ap_const_lv64_FFFFFFFFFFC00000.is_01())? sc_lv<64>(): (sc_biguint<64>(length_reg_V.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFC00000));
}

void datamover_controller::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void datamover_controller::thread_ap_condition_52() {
    ap_condition_52 = (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_120_p2.read()) && esl_seteq<1,1,1>(core_on_V_load_load_fu_126_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, m_axis_tready_V_read_read_fu_68_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln895_fu_146_p2.read()));
}

void datamover_controller::thread_ap_condition_60() {
    ap_condition_60 = (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_120_p2.read()) && esl_seteq<1,1,1>(core_on_V_load_load_fu_126_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, m_axis_tready_V_read_read_fu_68_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln895_fu_146_p2.read()));
}

void datamover_controller::thread_byte_to_transfer_V_fu_156_p3() {
    byte_to_transfer_V_fu_156_p3 = (!icmp_ln895_fu_146_p2.read()[0].is_01())? sc_lv<23>(): ((icmp_ln895_fu_146_p2.read()[0].to_bool())? ap_const_lv23_400000: trunc_ln681_fu_152_p1.read());
}

void datamover_controller::thread_core_on_V_load_load_fu_126_p1() {
    core_on_V_load_load_fu_126_p1 = core_on_V.read();
}

void datamover_controller::thread_icmp_ln895_fu_146_p2() {
    icmp_ln895_fu_146_p2 = (!length_reg_V.read().is_01() || !ap_const_lv64_400000.is_01())? sc_lv<1>(): (sc_biguint<64>(length_reg_V.read()) > sc_biguint<64>(ap_const_lv64_400000));
}

void datamover_controller::thread_lhs_V_fu_114_p2() {
    lhs_V_fu_114_p2 = (start_reg_V.read() ^ ap_const_lv1_1);
}

void datamover_controller::thread_m_axis_tdata_V() {
    m_axis_tdata_V = m_axis_reg_tdata_V.read();
}

void datamover_controller::thread_m_axis_tready_V_read_read_fu_68_p2() {
    m_axis_tready_V_read_read_fu_68_p2 = m_axis_tready_V.read();
}

void datamover_controller::thread_m_axis_tvalid_V() {
    m_axis_tvalid_V = m_axis_reg_tvalid_V.read();
}

void datamover_controller::thread_p_Result_s_fu_168_p5() {
    p_Result_s_fu_168_p5 = esl_concat<81,23>(esl_concat<72,9>(esl_concat<8,64>(ap_const_lv8_0, curr_addr_V.read()), ap_const_lv9_1), byte_to_transfer_V_fu_156_p3.read());
}

void datamover_controller::thread_ret_V_fu_120_p2() {
    ret_V_fu_120_p2 = (start_V.read() & lhs_V_fu_114_p2.read());
}

void datamover_controller::thread_trunc_ln681_fu_152_p1() {
    trunc_ln681_fu_152_p1 = length_reg_V.read().range(23-1, 0);
}

void datamover_controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void datamover_controller::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"start_V\" :  \"" << start_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"length_V\" :  \"" << length_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axis_tdata_V\" :  \"" << m_axis_tdata_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tvalid_V\" :  \"" << m_axis_tvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_tready_V\" :  \"" << m_axis_tready_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

