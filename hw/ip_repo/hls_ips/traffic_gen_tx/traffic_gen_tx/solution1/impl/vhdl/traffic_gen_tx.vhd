-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traffic_gen_tx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    from_decoder_tdata_V : IN STD_LOGIC_VECTOR (511 downto 0);
    from_decoder_tkeep_V : IN STD_LOGIC_VECTOR (63 downto 0);
    from_decoder_tlast_V : IN STD_LOGIC_VECTOR (0 downto 0);
    from_decoder_tvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    to_app_tdata_V : OUT STD_LOGIC_VECTOR (511 downto 0);
    to_app_tkeep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    to_app_tlast_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    to_app_tvalid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    to_cmp_fifo_tdata_V : OUT STD_LOGIC_VECTOR (511 downto 0);
    to_cmp_fifo_tkeep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    to_cmp_fifo_tlast_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    to_cmp_fifo_tvalid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    from_decoder_tready_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    to_app_tready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tx_timeElapse_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    tx_timestamp_sum_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    pkt_cnt_tx_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    time_cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of traffic_gen_tx is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "traffic_gen_tx,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.031000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=196,HLS_SYN_LUT=1379,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tx_timeElapse_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tx_timestamp_sum_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal pkt_cnt_tx_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal start_flag_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal time_cnt_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tx_start_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal start_initialized_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal core_on_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sub_ln214_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal and_ln36_3_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_1_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_2_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal core_on_V_load_load_fu_434_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_initialized_V_s_load_fu_316_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal from_decoder_tvalid_s_read_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln883_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_1_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_2_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln43_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln544_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    core_on_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                core_on_V <= ap_const_lv1_0;
            else
                if (((from_decoder_tvalid_s_read_fu_123_p2 = ap_const_lv1_1) and (core_on_V_load_load_fu_434_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    core_on_V <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    pkt_cnt_tx_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pkt_cnt_tx_reg_V <= ap_const_lv32_0;
            else
                if (((ap_const_lv1_1 = and_ln36_3_fu_266_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    pkt_cnt_tx_reg_V <= add_ln700_1_fu_304_p2;
                end if; 
            end if;
        end if;
    end process;


    start_flag_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_flag_V <= ap_const_lv1_0;
            else
                if (((tmp_fu_420_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    start_flag_V <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    start_initialized_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_initialized_V <= ap_const_lv1_0;
            else
                if (((ap_const_lv1_1 = and_ln43_1_fu_332_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    start_initialized_V <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    time_cnt_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                time_cnt_reg_V <= ap_const_lv32_0;
            else
                if (((core_on_V_load_load_fu_434_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    time_cnt_reg_V <= add_ln700_2_fu_444_p2;
                end if; 
            end if;
        end if;
    end process;


    tx_start_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tx_start_V <= ap_const_lv32_0;
            else
                if (((start_initialized_V_s_load_fu_316_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tx_start_V <= time_cnt_reg_V;
                end if; 
            end if;
        end if;
    end process;


    tx_timeElapse_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tx_timeElapse_reg_V <= ap_const_lv32_0;
            else
                if (((ap_const_lv1_1 = and_ln36_3_fu_266_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tx_timeElapse_reg_V <= sub_ln214_fu_276_p2;
                end if; 
            end if;
        end if;
    end process;


    tx_timestamp_sum_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tx_timestamp_sum_reg <= ap_const_lv64_0;
            else
                if (((ap_const_lv1_1 = and_ln36_3_fu_266_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    tx_timestamp_sum_reg <= add_ln700_fu_292_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_1_fu_304_p2 <= std_logic_vector(unsigned(pkt_cnt_tx_reg_V) + unsigned(ap_const_lv32_1));
    add_ln700_2_fu_444_p2 <= std_logic_vector(unsigned(time_cnt_reg_V) + unsigned(ap_const_lv32_1));
    add_ln700_fu_292_p2 <= std_logic_vector(unsigned(tx_timestamp_sum_reg) + unsigned(zext_ln700_fu_288_p1));
    and_ln36_1_fu_248_p2 <= (ret_V_fu_236_p2 and from_decoder_tlast_V);
    and_ln36_2_fu_254_p2 <= (from_decoder_tvalid_V and and_ln36_1_fu_248_p2);
    and_ln36_3_fu_266_p2 <= (icmp_ln883_fu_260_p2 and and_ln36_2_fu_254_p2);
    and_ln43_1_fu_332_p2 <= (icmp_ln883_fu_260_p2 and and_ln43_fu_326_p2);
    and_ln43_fu_326_p2 <= (ret_V_fu_236_p2 and from_decoder_tvalid_V);
    and_ln51_1_fu_388_p2 <= (icmp_ln883_fu_260_p2 and and_ln51_fu_382_p2);
    and_ln51_fu_382_p2 <= (to_app_tready_V and and_ln544_fu_344_p2);
    and_ln544_fu_344_p2 <= (start_flag_V and from_decoder_tvalid_V);
    and_ln883_fu_350_p2 <= (icmp_ln883_fu_260_p2 and and_ln544_fu_344_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    core_on_V_load_load_fu_434_p1 <= core_on_V;
    from_decoder_tready_V <= ret_V_fu_236_p2;
    from_decoder_tvalid_s_read_fu_123_p2 <= from_decoder_tvalid_V;
    icmp_ln883_fu_260_p2 <= "0" when (from_decoder_tkeep_V = ap_const_lv64_0) else "1";
    pkt_cnt_tx_V <= pkt_cnt_tx_reg_V;
    ret_V_fu_236_p2 <= (to_app_tready_V and start_flag_V);
    start_initialized_V_s_load_fu_316_p1 <= start_initialized_V;
    sub_ln214_fu_276_p2 <= std_logic_vector(unsigned(time_cnt_reg_V) - unsigned(tx_start_V));
    time_cnt_V <= time_cnt_reg_V;
    tmp_fu_420_p3 <= time_cnt_reg_V(5 downto 5);
    to_app_tdata_V <= 
        from_decoder_tdata_V when (and_ln883_fu_350_p2(0) = '1') else 
        ap_const_lv512_lc_1;
    to_app_tkeep_V <= 
        from_decoder_tkeep_V when (and_ln883_fu_350_p2(0) = '1') else 
        ap_const_lv64_0;
    to_app_tlast_V <= (from_decoder_tlast_V and and_ln883_fu_350_p2);
    to_app_tvalid_V <= and_ln883_fu_350_p2;
    to_cmp_fifo_tdata_V <= 
        from_decoder_tdata_V when (and_ln51_1_fu_388_p2(0) = '1') else 
        ap_const_lv512_lc_1;
    to_cmp_fifo_tkeep_V <= 
        from_decoder_tkeep_V when (and_ln51_1_fu_388_p2(0) = '1') else 
        ap_const_lv64_0;
    to_cmp_fifo_tlast_V <= (from_decoder_tlast_V and and_ln51_1_fu_388_p2);
    to_cmp_fifo_tvalid_V <= and_ln51_1_fu_388_p2;
    tx_timeElapse_V <= tx_timeElapse_reg_V;
    tx_timestamp_sum_V <= tx_timestamp_sum_reg;
    zext_ln700_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(time_cnt_reg_V),64));
end behav;
