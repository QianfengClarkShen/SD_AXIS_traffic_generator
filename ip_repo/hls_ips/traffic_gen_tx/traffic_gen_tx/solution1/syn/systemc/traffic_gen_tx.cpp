// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "traffic_gen_tx.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic traffic_gen_tx::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> traffic_gen_tx::ap_ST_fsm_state1 = "1";
const sc_lv<32> traffic_gen_tx::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> traffic_gen_tx::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> traffic_gen_tx::ap_const_lv1_0 = "0";
const sc_lv<1> traffic_gen_tx::ap_const_lv1_1 = "1";
const sc_lv<32> traffic_gen_tx::ap_const_lv32_1 = "1";
const sc_lv<512> traffic_gen_tx::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> traffic_gen_tx::ap_const_lv32_5 = "101";
const sc_logic traffic_gen_tx::ap_const_logic_0 = sc_dt::Log_0;
const bool traffic_gen_tx::ap_const_boolean_1 = true;

traffic_gen_tx::traffic_gen_tx(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_1_fu_304_p2);
    sensitive << ( pkt_cnt_tx_reg_V );

    SC_METHOD(thread_add_ln700_2_fu_444_p2);
    sensitive << ( time_cnt_reg_V );

    SC_METHOD(thread_add_ln700_fu_292_p2);
    sensitive << ( tx_timestamp_sum_reg );
    sensitive << ( zext_ln700_fu_288_p1 );

    SC_METHOD(thread_and_ln36_1_fu_248_p2);
    sensitive << ( from_decoder_tlast_V );
    sensitive << ( ret_V_fu_236_p2 );

    SC_METHOD(thread_and_ln36_2_fu_254_p2);
    sensitive << ( from_decoder_tvalid_V );
    sensitive << ( and_ln36_1_fu_248_p2 );

    SC_METHOD(thread_and_ln36_3_fu_266_p2);
    sensitive << ( and_ln36_2_fu_254_p2 );
    sensitive << ( icmp_ln883_fu_260_p2 );

    SC_METHOD(thread_and_ln43_1_fu_332_p2);
    sensitive << ( icmp_ln883_fu_260_p2 );
    sensitive << ( and_ln43_fu_326_p2 );

    SC_METHOD(thread_and_ln43_fu_326_p2);
    sensitive << ( from_decoder_tvalid_V );
    sensitive << ( ret_V_fu_236_p2 );

    SC_METHOD(thread_and_ln51_1_fu_388_p2);
    sensitive << ( icmp_ln883_fu_260_p2 );
    sensitive << ( and_ln51_fu_382_p2 );

    SC_METHOD(thread_and_ln51_fu_382_p2);
    sensitive << ( to_app_tready_V );
    sensitive << ( and_ln544_fu_344_p2 );

    SC_METHOD(thread_and_ln544_fu_344_p2);
    sensitive << ( from_decoder_tvalid_V );
    sensitive << ( start_flag_V );

    SC_METHOD(thread_and_ln883_fu_350_p2);
    sensitive << ( icmp_ln883_fu_260_p2 );
    sensitive << ( and_ln544_fu_344_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_core_on_V_load_load_fu_434_p1);
    sensitive << ( core_on_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_from_decoder_tready_V);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_236_p2 );

    SC_METHOD(thread_from_decoder_tvalid_s_read_fu_123_p2);
    sensitive << ( from_decoder_tvalid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln883_fu_260_p2);
    sensitive << ( from_decoder_tkeep_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_pkt_cnt_tx_V);
    sensitive << ( pkt_cnt_tx_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ret_V_fu_236_p2);
    sensitive << ( to_app_tready_V );
    sensitive << ( start_flag_V );

    SC_METHOD(thread_start_initialized_V_s_load_fu_316_p1);
    sensitive << ( start_initialized_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sub_ln214_fu_276_p2);
    sensitive << ( time_cnt_reg_V );
    sensitive << ( tx_start_V );

    SC_METHOD(thread_time_cnt_V);
    sensitive << ( time_cnt_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_fu_420_p3);
    sensitive << ( time_cnt_reg_V );

    SC_METHOD(thread_to_app_tdata_V);
    sensitive << ( from_decoder_tdata_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln883_fu_350_p2 );

    SC_METHOD(thread_to_app_tkeep_V);
    sensitive << ( from_decoder_tkeep_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln883_fu_350_p2 );

    SC_METHOD(thread_to_app_tlast_V);
    sensitive << ( from_decoder_tlast_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln883_fu_350_p2 );

    SC_METHOD(thread_to_app_tvalid_V);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln883_fu_350_p2 );

    SC_METHOD(thread_to_cmp_fifo_tdata_V);
    sensitive << ( from_decoder_tdata_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln51_1_fu_388_p2 );

    SC_METHOD(thread_to_cmp_fifo_tkeep_V);
    sensitive << ( from_decoder_tkeep_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln51_1_fu_388_p2 );

    SC_METHOD(thread_to_cmp_fifo_tlast_V);
    sensitive << ( from_decoder_tlast_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln51_1_fu_388_p2 );

    SC_METHOD(thread_to_cmp_fifo_tvalid_V);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln51_1_fu_388_p2 );

    SC_METHOD(thread_tx_timeElapse_V);
    sensitive << ( tx_timeElapse_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tx_timestamp_sum_V);
    sensitive << ( tx_timestamp_sum_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_zext_ln700_fu_288_p1);
    sensitive << ( time_cnt_reg_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    tx_timeElapse_reg_V = "00000000000000000000000000000000";
    tx_timestamp_sum_reg = "0000000000000000000000000000000000000000000000000000000000000000";
    pkt_cnt_tx_reg_V = "00000000000000000000000000000000";
    start_flag_V = "0";
    time_cnt_reg_V = "00000000000000000000000000000000";
    tx_start_V = "00000000000000000000000000000000";
    start_initialized_V = "0";
    core_on_V = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "traffic_gen_tx_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, from_decoder_tdata_V, "(port)from_decoder_tdata_V");
    sc_trace(mVcdFile, from_decoder_tkeep_V, "(port)from_decoder_tkeep_V");
    sc_trace(mVcdFile, from_decoder_tlast_V, "(port)from_decoder_tlast_V");
    sc_trace(mVcdFile, from_decoder_tvalid_V, "(port)from_decoder_tvalid_V");
    sc_trace(mVcdFile, to_app_tdata_V, "(port)to_app_tdata_V");
    sc_trace(mVcdFile, to_app_tkeep_V, "(port)to_app_tkeep_V");
    sc_trace(mVcdFile, to_app_tlast_V, "(port)to_app_tlast_V");
    sc_trace(mVcdFile, to_app_tvalid_V, "(port)to_app_tvalid_V");
    sc_trace(mVcdFile, to_cmp_fifo_tdata_V, "(port)to_cmp_fifo_tdata_V");
    sc_trace(mVcdFile, to_cmp_fifo_tkeep_V, "(port)to_cmp_fifo_tkeep_V");
    sc_trace(mVcdFile, to_cmp_fifo_tlast_V, "(port)to_cmp_fifo_tlast_V");
    sc_trace(mVcdFile, to_cmp_fifo_tvalid_V, "(port)to_cmp_fifo_tvalid_V");
    sc_trace(mVcdFile, from_decoder_tready_V, "(port)from_decoder_tready_V");
    sc_trace(mVcdFile, to_app_tready_V, "(port)to_app_tready_V");
    sc_trace(mVcdFile, tx_timeElapse_V, "(port)tx_timeElapse_V");
    sc_trace(mVcdFile, tx_timestamp_sum_V, "(port)tx_timestamp_sum_V");
    sc_trace(mVcdFile, pkt_cnt_tx_V, "(port)pkt_cnt_tx_V");
    sc_trace(mVcdFile, time_cnt_V, "(port)time_cnt_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tx_timeElapse_reg_V, "tx_timeElapse_reg_V");
    sc_trace(mVcdFile, tx_timestamp_sum_reg, "tx_timestamp_sum_reg");
    sc_trace(mVcdFile, pkt_cnt_tx_reg_V, "pkt_cnt_tx_reg_V");
    sc_trace(mVcdFile, start_flag_V, "start_flag_V");
    sc_trace(mVcdFile, time_cnt_reg_V, "time_cnt_reg_V");
    sc_trace(mVcdFile, tx_start_V, "tx_start_V");
    sc_trace(mVcdFile, start_initialized_V, "start_initialized_V");
    sc_trace(mVcdFile, core_on_V, "core_on_V");
    sc_trace(mVcdFile, sub_ln214_fu_276_p2, "sub_ln214_fu_276_p2");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, and_ln36_3_fu_266_p2, "and_ln36_3_fu_266_p2");
    sc_trace(mVcdFile, add_ln700_fu_292_p2, "add_ln700_fu_292_p2");
    sc_trace(mVcdFile, add_ln700_1_fu_304_p2, "add_ln700_1_fu_304_p2");
    sc_trace(mVcdFile, tmp_fu_420_p3, "tmp_fu_420_p3");
    sc_trace(mVcdFile, add_ln700_2_fu_444_p2, "add_ln700_2_fu_444_p2");
    sc_trace(mVcdFile, core_on_V_load_load_fu_434_p1, "core_on_V_load_load_fu_434_p1");
    sc_trace(mVcdFile, start_initialized_V_s_load_fu_316_p1, "start_initialized_V_s_load_fu_316_p1");
    sc_trace(mVcdFile, and_ln43_1_fu_332_p2, "and_ln43_1_fu_332_p2");
    sc_trace(mVcdFile, from_decoder_tvalid_s_read_fu_123_p2, "from_decoder_tvalid_s_read_fu_123_p2");
    sc_trace(mVcdFile, ret_V_fu_236_p2, "ret_V_fu_236_p2");
    sc_trace(mVcdFile, and_ln883_fu_350_p2, "and_ln883_fu_350_p2");
    sc_trace(mVcdFile, and_ln51_1_fu_388_p2, "and_ln51_1_fu_388_p2");
    sc_trace(mVcdFile, and_ln36_1_fu_248_p2, "and_ln36_1_fu_248_p2");
    sc_trace(mVcdFile, and_ln36_2_fu_254_p2, "and_ln36_2_fu_254_p2");
    sc_trace(mVcdFile, icmp_ln883_fu_260_p2, "icmp_ln883_fu_260_p2");
    sc_trace(mVcdFile, zext_ln700_fu_288_p1, "zext_ln700_fu_288_p1");
    sc_trace(mVcdFile, and_ln43_fu_326_p2, "and_ln43_fu_326_p2");
    sc_trace(mVcdFile, and_ln544_fu_344_p2, "and_ln544_fu_344_p2");
    sc_trace(mVcdFile, and_ln51_fu_382_p2, "and_ln51_fu_382_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("traffic_gen_tx.hdltvin.dat");
    mHdltvoutHandle.open("traffic_gen_tx.hdltvout.dat");
}

traffic_gen_tx::~traffic_gen_tx() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void traffic_gen_tx::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        core_on_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, core_on_V_load_load_fu_434_p1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, from_decoder_tvalid_s_read_fu_123_p2.read()))) {
            core_on_V = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        pkt_cnt_tx_reg_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(and_ln36_3_fu_266_p2.read(), ap_const_lv1_1))) {
            pkt_cnt_tx_reg_V = add_ln700_1_fu_304_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_flag_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_420_p3.read()))) {
            start_flag_V = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_initialized_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, and_ln43_1_fu_332_p2.read()))) {
            start_initialized_V = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        time_cnt_reg_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, core_on_V_load_load_fu_434_p1.read()))) {
            time_cnt_reg_V = add_ln700_2_fu_444_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tx_start_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, start_initialized_V_s_load_fu_316_p1.read()))) {
            tx_start_V = time_cnt_reg_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tx_timeElapse_reg_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(and_ln36_3_fu_266_p2.read(), ap_const_lv1_1))) {
            tx_timeElapse_reg_V = sub_ln214_fu_276_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tx_timestamp_sum_reg = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(and_ln36_3_fu_266_p2.read(), ap_const_lv1_1))) {
            tx_timestamp_sum_reg = add_ln700_fu_292_p2.read();
        }
    }
}

void traffic_gen_tx::thread_add_ln700_1_fu_304_p2() {
    add_ln700_1_fu_304_p2 = (!pkt_cnt_tx_reg_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(pkt_cnt_tx_reg_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void traffic_gen_tx::thread_add_ln700_2_fu_444_p2() {
    add_ln700_2_fu_444_p2 = (!time_cnt_reg_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(time_cnt_reg_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void traffic_gen_tx::thread_add_ln700_fu_292_p2() {
    add_ln700_fu_292_p2 = (!tx_timestamp_sum_reg.read().is_01() || !zext_ln700_fu_288_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tx_timestamp_sum_reg.read()) + sc_biguint<64>(zext_ln700_fu_288_p1.read()));
}

void traffic_gen_tx::thread_and_ln36_1_fu_248_p2() {
    and_ln36_1_fu_248_p2 = (from_decoder_tlast_V.read() & ret_V_fu_236_p2.read());
}

void traffic_gen_tx::thread_and_ln36_2_fu_254_p2() {
    and_ln36_2_fu_254_p2 = (and_ln36_1_fu_248_p2.read() & from_decoder_tvalid_V.read());
}

void traffic_gen_tx::thread_and_ln36_3_fu_266_p2() {
    and_ln36_3_fu_266_p2 = (and_ln36_2_fu_254_p2.read() & icmp_ln883_fu_260_p2.read());
}

void traffic_gen_tx::thread_and_ln43_1_fu_332_p2() {
    and_ln43_1_fu_332_p2 = (and_ln43_fu_326_p2.read() & icmp_ln883_fu_260_p2.read());
}

void traffic_gen_tx::thread_and_ln43_fu_326_p2() {
    and_ln43_fu_326_p2 = (from_decoder_tvalid_V.read() & ret_V_fu_236_p2.read());
}

void traffic_gen_tx::thread_and_ln51_1_fu_388_p2() {
    and_ln51_1_fu_388_p2 = (and_ln51_fu_382_p2.read() & icmp_ln883_fu_260_p2.read());
}

void traffic_gen_tx::thread_and_ln51_fu_382_p2() {
    and_ln51_fu_382_p2 = (and_ln544_fu_344_p2.read() & to_app_tready_V.read());
}

void traffic_gen_tx::thread_and_ln544_fu_344_p2() {
    and_ln544_fu_344_p2 = (start_flag_V.read() & from_decoder_tvalid_V.read());
}

void traffic_gen_tx::thread_and_ln883_fu_350_p2() {
    and_ln883_fu_350_p2 = (and_ln544_fu_344_p2.read() & icmp_ln883_fu_260_p2.read());
}

void traffic_gen_tx::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void traffic_gen_tx::thread_core_on_V_load_load_fu_434_p1() {
    core_on_V_load_load_fu_434_p1 = core_on_V.read();
}

void traffic_gen_tx::thread_from_decoder_tready_V() {
    from_decoder_tready_V = ret_V_fu_236_p2.read();
}

void traffic_gen_tx::thread_from_decoder_tvalid_s_read_fu_123_p2() {
    from_decoder_tvalid_s_read_fu_123_p2 = from_decoder_tvalid_V.read();
}

void traffic_gen_tx::thread_icmp_ln883_fu_260_p2() {
    icmp_ln883_fu_260_p2 = (!from_decoder_tkeep_V.read().is_01() || !ap_const_lv64_0.is_01())? sc_lv<1>(): sc_lv<1>(from_decoder_tkeep_V.read() != ap_const_lv64_0);
}

void traffic_gen_tx::thread_pkt_cnt_tx_V() {
    pkt_cnt_tx_V = pkt_cnt_tx_reg_V.read();
}

void traffic_gen_tx::thread_ret_V_fu_236_p2() {
    ret_V_fu_236_p2 = (start_flag_V.read() & to_app_tready_V.read());
}

void traffic_gen_tx::thread_start_initialized_V_s_load_fu_316_p1() {
    start_initialized_V_s_load_fu_316_p1 = start_initialized_V.read();
}

void traffic_gen_tx::thread_sub_ln214_fu_276_p2() {
    sub_ln214_fu_276_p2 = (!time_cnt_reg_V.read().is_01() || !tx_start_V.read().is_01())? sc_lv<32>(): (sc_biguint<32>(time_cnt_reg_V.read()) - sc_biguint<32>(tx_start_V.read()));
}

void traffic_gen_tx::thread_time_cnt_V() {
    time_cnt_V = time_cnt_reg_V.read();
}

void traffic_gen_tx::thread_tmp_fu_420_p3() {
    tmp_fu_420_p3 = time_cnt_reg_V.read().range(5, 5);
}

void traffic_gen_tx::thread_to_app_tdata_V() {
    to_app_tdata_V = (!and_ln883_fu_350_p2.read()[0].is_01())? sc_lv<512>(): ((and_ln883_fu_350_p2.read()[0].to_bool())? from_decoder_tdata_V.read(): ap_const_lv512_lc_1);
}

void traffic_gen_tx::thread_to_app_tkeep_V() {
    to_app_tkeep_V = (!and_ln883_fu_350_p2.read()[0].is_01())? sc_lv<64>(): ((and_ln883_fu_350_p2.read()[0].to_bool())? from_decoder_tkeep_V.read(): ap_const_lv64_0);
}

void traffic_gen_tx::thread_to_app_tlast_V() {
    to_app_tlast_V = (from_decoder_tlast_V.read() & and_ln883_fu_350_p2.read());
}

void traffic_gen_tx::thread_to_app_tvalid_V() {
    to_app_tvalid_V = and_ln883_fu_350_p2.read();
}

void traffic_gen_tx::thread_to_cmp_fifo_tdata_V() {
    to_cmp_fifo_tdata_V = (!and_ln51_1_fu_388_p2.read()[0].is_01())? sc_lv<512>(): ((and_ln51_1_fu_388_p2.read()[0].to_bool())? from_decoder_tdata_V.read(): ap_const_lv512_lc_1);
}

void traffic_gen_tx::thread_to_cmp_fifo_tkeep_V() {
    to_cmp_fifo_tkeep_V = (!and_ln51_1_fu_388_p2.read()[0].is_01())? sc_lv<64>(): ((and_ln51_1_fu_388_p2.read()[0].to_bool())? from_decoder_tkeep_V.read(): ap_const_lv64_0);
}

void traffic_gen_tx::thread_to_cmp_fifo_tlast_V() {
    to_cmp_fifo_tlast_V = (from_decoder_tlast_V.read() & and_ln51_1_fu_388_p2.read());
}

void traffic_gen_tx::thread_to_cmp_fifo_tvalid_V() {
    to_cmp_fifo_tvalid_V = and_ln51_1_fu_388_p2.read();
}

void traffic_gen_tx::thread_tx_timeElapse_V() {
    tx_timeElapse_V = tx_timeElapse_reg_V.read();
}

void traffic_gen_tx::thread_tx_timestamp_sum_V() {
    tx_timestamp_sum_V = tx_timestamp_sum_reg.read();
}

void traffic_gen_tx::thread_zext_ln700_fu_288_p1() {
    zext_ln700_fu_288_p1 = esl_zext<64,32>(time_cnt_reg_V.read());
}

void traffic_gen_tx::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void traffic_gen_tx::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_decoder_tdata_V\" :  \"" << from_decoder_tdata_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_decoder_tkeep_V\" :  \"" << from_decoder_tkeep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_decoder_tlast_V\" :  \"" << from_decoder_tlast_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_decoder_tvalid_V\" :  \"" << from_decoder_tvalid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"to_app_tdata_V\" :  \"" << to_app_tdata_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_app_tkeep_V\" :  \"" << to_app_tkeep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_app_tlast_V\" :  \"" << to_app_tlast_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_app_tvalid_V\" :  \"" << to_app_tvalid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_cmp_fifo_tdata_V\" :  \"" << to_cmp_fifo_tdata_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_cmp_fifo_tkeep_V\" :  \"" << to_cmp_fifo_tkeep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_cmp_fifo_tlast_V\" :  \"" << to_cmp_fifo_tlast_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_cmp_fifo_tvalid_V\" :  \"" << to_cmp_fifo_tvalid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"from_decoder_tready_V\" :  \"" << from_decoder_tready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"to_app_tready_V\" :  \"" << to_app_tready_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_timeElapse_V\" :  \"" << tx_timeElapse_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tx_timestamp_sum_V\" :  \"" << tx_timestamp_sum_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pkt_cnt_tx_V\" :  \"" << pkt_cnt_tx_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"time_cnt_V\" :  \"" << time_cnt_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

