// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sw_interface_HH_
#define _sw_interface_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sw_interface_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct sw_interface : public sc_module {
    // Port declarations 29
    sc_out< sc_lv<1> > start_V;
    sc_out< sc_lv<1> > rst_V;
    sc_out< sc_lv<64> > transfer_length_V;
    sc_in< sc_lv<1> > mismatch_V;
    sc_in< sc_lv<32> > tx_timeElapse_V;
    sc_in< sc_lv<32> > rx_timeElapse_V;
    sc_in< sc_lv<64> > tx_timestamp_sum_V;
    sc_in< sc_lv<64> > rx_timestamp_sum_V;
    sc_in< sc_lv<32> > pkt_cnt_tx_V;
    sc_in< sc_lv<32> > pkt_cnt_rx_V;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_signal< sc_logic > ap_var_for_const0;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    sw_interface(sc_module_name name);
    SC_HAS_PROCESS(sw_interface);

    ~sw_interface();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sw_interface_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* sw_interface_AXILiteS_s_axi_U;
    sc_signal< sc_lv<1> > axil_start_V;
    sc_signal< sc_lv<1> > axil_rst_V;
    sc_signal< sc_lv<32> > axil_len_low_V;
    sc_signal< sc_lv<32> > axil_len_high_V;
    sc_signal< sc_lv<32> > axil_mismatch_V;
    sc_signal< sc_logic > axil_mismatch_V_ap_vld;
    sc_signal< sc_logic > axil_tx_timeElapse_V_ap_vld;
    sc_signal< sc_logic > axil_rx_timeElapse_V_ap_vld;
    sc_signal< sc_lv<32> > axil_tx_timestamp_sum_low_V;
    sc_signal< sc_logic > axil_tx_timestamp_sum_low_V_ap_vld;
    sc_signal< sc_lv<32> > axil_tx_timestamp_sum_high_V;
    sc_signal< sc_logic > axil_tx_timestamp_sum_high_V_ap_vld;
    sc_signal< sc_lv<32> > axil_rx_timestamp_sum_low_V;
    sc_signal< sc_logic > axil_rx_timestamp_sum_low_V_ap_vld;
    sc_signal< sc_lv<32> > axil_rx_timestamp_sum_high_V;
    sc_signal< sc_logic > axil_rx_timestamp_sum_high_V_ap_vld;
    sc_signal< sc_logic > axil_pkt_cnt_tx_V_ap_vld;
    sc_signal< sc_logic > axil_pkt_cnt_rx_V_ap_vld;
    sc_signal< sc_logic > ap_rst_n_inv;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_axil_mismatch_V();
    void thread_axil_mismatch_V_ap_vld();
    void thread_axil_pkt_cnt_rx_V_ap_vld();
    void thread_axil_pkt_cnt_tx_V_ap_vld();
    void thread_axil_rx_timeElapse_V_ap_vld();
    void thread_axil_rx_timestamp_sum_high_V();
    void thread_axil_rx_timestamp_sum_high_V_ap_vld();
    void thread_axil_rx_timestamp_sum_low_V();
    void thread_axil_rx_timestamp_sum_low_V_ap_vld();
    void thread_axil_tx_timeElapse_V_ap_vld();
    void thread_axil_tx_timestamp_sum_high_V();
    void thread_axil_tx_timestamp_sum_high_V_ap_vld();
    void thread_axil_tx_timestamp_sum_low_V();
    void thread_axil_tx_timestamp_sum_low_V_ap_vld();
    void thread_rst_V();
    void thread_start_V();
    void thread_transfer_length_V();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
